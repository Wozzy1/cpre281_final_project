Things to do:

Create math logic to convert percentage to letter grade X
Ex:
  90 <= A <= 99
  80 <= B <= 89
  70 <= C <= 79
  60 <= D <= 69
   0 <= F <= 59

Things needed:
  7 Bit comparison logic X
  7 bit to hex / 7seg converter X
  convert the 4bit output to 7 seg display
  
Storage:
  7-bit registers x 4
  
  Register file (7 bit wires):
    4 register files - 1 for each 7seg display
	4 to 1 MUX for reading
	4 to 2 decoder for writing


module comparator (
    input A1, A0, B1, B0,
    output A_greater_B, A_equal_B, A_less_B
);

// A>B
assign A_greater_B = (A1 & ~B1) | (A0 & ~B1 & ~B0) | (A1 & A0 & ~B0);

// A=B
assign A_equal_B = (A1 & ~A0 & ~B1 & ~B0) | (A1 & ~A0 & B1 & ~B0) |
                   (A1 & A0 & B1 & B0) | (A1 & A0 & ~B1 & B0') |
                   (A1 & ~B1' & (A0 & B0 | A0' & B0')) |
                   (B1 & ~A1' & (A0 & B0 | A0' & B0'));

// A<B
assign A_less_B = (A1' & B1) | (A0' & B1 & B0) | (A1' & A0' & B0);

endmodule

module comparator8b (In1, In2, Gt, Lt, Eq); 
input [7:0]  In1, In2; //The two 8-bit Inputs In1 and In2 
output	Gt, Lt, Eq; //The Outputs of comparison 
reg	Gt, Lt, Eq; 
always @ (In1 or In2) //Check the state of the input lines 
  begin 
    Gt <= ( In1 > In2 )? 1'b1 : 1'b0; 
    Lt <= ( In1 < In2 )? 1'b1 : 1'b0; 
    Eq <= ( In1 == In2)? 1'b1 : 1'b0; 
  end
endmodule

module LetterGenerator (Input, Output, inA, inB, inC, inD, inF);
input [6:0] Input; // the binary input of the percentage
output reg [3:0] Output; // outputs the bits for a letter A-F
output inA, inB, inC, inD, inF;

/*
assign a_l = 7'b1011010; // 90
assign a_h = 7'b1100011; // 99

assign b_l = 7'b1010000; // 80
assign b_h = 7'b1011001; // 89

assign c_l = 7'b1000110; // 70
assign c_h = 7'b1001111; // 79

assign d_l = 7'b0111100; // 60
assign d_h = 7'b1000101; // 69

assign f_l = 7'b0000000; // 0
assign f_h = 7'b0111011; // 59
*/
//reg inA, inB, inC, inD, inF;

// comparator7b comp1(.In1(Input), .In2(a_l), .Gt(Gt), .Lt(Lt), .Eq(Eq));
/*
always @ (Input)
  begin
    case ({Input})
	  7'b1011010: 7'b1100011: inA = 1;
	  80: 89: inB = 1;
	  70: 79: inC = 1;
	  60: 69: inD = 1;
	   0: 59: inF = 1;
	endcase
  end
*/

always @ (Input)
// assign inA = (Input >= a_l) && (Input <= a_h);
// assign inB = (Input >= b_l) && (Input <= b_h);
// assign inC = (Input >= c_l) && (Input <= c_h);
// assign inD = (Input >= d_l) && (Input <= d_h);
// assign inF = (Input >= f_l) && (Input <= f_h);
    

always @ (inA, inB, inC, inD, inF)
  begin 
    case({inA, inB, inC, inD, inF})
	  5'b10000: Output = 4'b1010; // output is A
	  5'b01000: Output = 4'b1011; // output is B
	  5'b00100: Output = 4'b1100; // output is C
	  5'b00010: Output = 4'b1101; // output is D
	  5'b00001: Output = 4'b1111; // output is F
	//  default : Output = 4'b1110; // output is E - Error / Empty
	endcase
end

 endmodule